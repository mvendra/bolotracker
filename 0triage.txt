
[
* do add unit testing with a repoed db for testing (i.e. dont throw away the debug code at tui.cpp)
* NO! dont repo the db. just write it all first. so you validate both things (write and read ops)
* write a helper function that creates a sample db for testing. then add a scope guard to it so the db is removed afterwards
]
* Plus additional helpers: list everything by name/pk (for example)

[
@finish the model design and api
* welp, i suppose the TUI and others will have to use model to get pk's to reference where and what they wanna add
* i just need stuff like getPkByName, and etc - by the "secondary" pk's such as name, tag, etc.
* and listing is alot easier. list by name, by pk, whatever.
]

[
* double-and-triple check, test lots of cases, before ever putting this into production.
* one miswire, and i could potentially accumulate heaps of financial data!!!
* also check new constraints, not null and etc
]

[
@gui, first strike
* just fltk, listing all three basic tables
* and a close button. done.
* just to try out adding another lib, plus testing the controller interface
]

[
@gui priority list
* fltk
* CEGUI
* wxwidgets
* gtk+
* qt
* tkinder+python
* could even be served via python+flask (rest api) and have a html+css frontend
]

[
@future
* publish it later
]

